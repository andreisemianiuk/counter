{"version":3,"sources":["Display.tsx","Button.tsx","Settings.tsx","App.tsx","index.tsx"],"names":["Display","error","editMode","startValue","maxValue","className","Button","title","callback","disabled","onClick","Settings","props","useState","setStartValue","setMaxValue","useEffect","newStartValue","localStorage","getItem","newMaxValue","JSON","parse","errorMax","type","value","onChange","e","num","currentTarget","changeMaxValue","errorStart","changeStartValue","App","setEditMode","setErrorMax","setErrorStart","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.939d304b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './App.css'\r\n\r\ntype DisplayType = {\r\n  editMode: boolean\r\n  error: boolean\r\n  startValue: number\r\n  maxValue: number\r\n}\r\n\r\nfunction Display({error, editMode, startValue, maxValue}: DisplayType) {\r\n  return (\r\n    <div className='display-wrapper'>\r\n      {error ? <div className={'display-error'}>Invalid value</div> :\r\n        editMode ? <div className={'display-message'}>Enter set to save changes</div> :\r\n          <div className={`display-count ${startValue === maxValue ? 'red' : ''}`}>{startValue}</div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Display\r\n","import React from 'react'\r\nimport './App.css'\r\n\r\ntype ButtonType = {\r\n  editMode?: boolean\r\n  error?: boolean\r\n  title: string\r\n  startValue: number\r\n  maxValue: number\r\n  callback: () => void\r\n}\r\n\r\nfunction Button({error,editMode, title, startValue, maxValue, callback}: ButtonType) {\r\n  const clickHandler = () => {\r\n    callback()\r\n  }\r\n  const disabled = error || editMode || (title === 'inc' && startValue >= maxValue)\r\n    || (title === 'reset' && maxValue !== startValue)\r\n  \r\n  return (\r\n    <button\r\n      className={`btn ${disabled ? 'disabled' : null}`}\r\n      onClick={clickHandler}\r\n      disabled={disabled}\r\n    >\r\n      {title}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button\r\n","import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport './App.css'\r\n\r\ntype SettingsType = {\r\n  errorMax: boolean\r\n  errorStart: boolean\r\n  startValue: number\r\n  maxValue: number\r\n  changeStartValue: (num: number) => void\r\n  changeMaxValue: (num: number) => void\r\n}\r\n\r\nfunction Settings(props: SettingsType) {\r\n  let [startValue, setStartValue] = useState(0)\r\n  let [maxValue, setMaxValue] = useState(0)\r\n  \r\n  useEffect(() => {\r\n    let newStartValue = localStorage.getItem('start-value')\r\n    let newMaxValue = localStorage.getItem('max-value')\r\n    if (newStartValue) {\r\n      setStartValue(JSON.parse(newStartValue))\r\n    }\r\n    if (newMaxValue) {\r\n      setMaxValue(JSON.parse(newMaxValue))\r\n    }\r\n  }, [])\r\n  \r\n  const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const num = +e.currentTarget.value\r\n    setStartValue(num)\r\n    props.changeStartValue(num)\r\n  }\r\n  const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const num = +e.currentTarget.value\r\n    setMaxValue(num)\r\n    props.changeMaxValue(num)\r\n  }\r\n  \r\n  return (\r\n    <div className='settings-wrapper'>\r\n      <div className={'settings-input-wrapper'}>\r\n        max value:\r\n        <input\r\n          className={`settings-input ${props.errorMax ? 'error' : ''}`}\r\n          type={'number'}\r\n          value={maxValue}\r\n          onChange={changeMaxValue}\r\n        />\r\n      </div>\r\n      <div className={'settings-input-wrapper'}>\r\n        start value:\r\n        <input\r\n          className={`settings-input ${props.errorStart ? 'error' : ''}`}\r\n          type={'number'}\r\n          value={startValue}\r\n          onChange={changeStartValue}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport Display from './Display'\r\nimport Button from './Button'\r\nimport Settings from './Settings'\r\n\r\nfunction App() {\r\n  let [startValue, setStartValue] = useState(0)\r\n  let [maxValue, setMaxValue] = useState(0)\r\n  let [editMode, setEditMode] = useState(false)\r\n  let [errorMax, setErrorMax] = useState(false)\r\n  let [errorStart, setErrorStart] = useState(false)\r\n  \r\n  let error = errorMax || errorStart\r\n  if (!maxValue && !startValue) {\r\n    error = true\r\n  }\r\n  \r\n  useEffect(() => {\r\n    const newStartValue = localStorage.getItem('start-value')\r\n    const newMaxValue = localStorage.getItem('max-value')\r\n    \r\n    if (newStartValue) {\r\n      setStartValue(JSON.parse(newStartValue))\r\n    }\r\n    if (newMaxValue) {\r\n      setMaxValue(JSON.parse(newMaxValue))\r\n    }\r\n  }, [])\r\n  \r\n  const increment = () => {\r\n    setStartValue(++startValue)\r\n  }\r\n  const reset = () => {\r\n    const startValue = localStorage.getItem('start-value')\r\n    if (startValue) {\r\n      setStartValue(+startValue)\r\n    }\r\n  }\r\n  const set = () => {\r\n    localStorage.setItem('start-value', JSON.stringify(startValue))\r\n    localStorage.setItem('max-value', JSON.stringify(maxValue))\r\n    setEditMode(false)\r\n  }\r\n  \r\n  const changeStartValue = (num: number) => {\r\n    if (num >= maxValue || num < 0) {\r\n      setErrorStart(true)\r\n    } else if (num !== startValue) {\r\n      setStartValue(num)\r\n      setEditMode(true)\r\n    } else {\r\n      setEditMode(true)\r\n      setErrorStart(false)\r\n    }\r\n  }\r\n  \r\n  const changeMaxValue = (num: number) => {\r\n    if (num <= startValue || num < 0) {\r\n      setErrorMax(true)\r\n    } else if (num !== maxValue) {\r\n      setMaxValue(num)\r\n      setEditMode(true)\r\n    } else {\r\n      setEditMode(true)\r\n      setErrorMax(false)\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className='container'>\r\n      <div className='settings'>\r\n        <Settings\r\n          errorMax={errorMax}\r\n          errorStart={errorStart}\r\n          startValue={startValue}\r\n          maxValue={maxValue}\r\n          changeMaxValue={changeMaxValue}\r\n          changeStartValue={changeStartValue}\r\n        />\r\n        <div className='buttons-wrapper'>\r\n          <Button\r\n            title={'set'}\r\n            error={error}\r\n            startValue={startValue}\r\n            maxValue={maxValue}\r\n            callback={set}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className='counter'>\r\n        <Display\r\n          startValue={startValue}\r\n          error={error}\r\n          maxValue={maxValue}\r\n          editMode={editMode}\r\n        />\r\n        <div className='buttons-wrapper'>\r\n          <Button\r\n            editMode={editMode}\r\n            error={error}\r\n            title={'inc'}\r\n            startValue={startValue}\r\n            maxValue={maxValue}\r\n            callback={increment}\r\n          />\r\n          <Button\r\n            editMode={editMode}\r\n            error={error}\r\n            title={'reset'}\r\n            startValue={startValue}\r\n            maxValue={maxValue}\r\n            callback={reset}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <App/>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}