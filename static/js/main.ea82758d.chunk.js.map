{"version":3,"sources":["Counter_2/Counter_2.module.css","Error404.tsx","Display.tsx","Button.tsx","Settings.tsx","redux/actions.ts","Counter_1/COUNTER_1.tsx","Counter_2/COUNTER_2.tsx","Routes.tsx","Header.tsx","App.tsx","redux/counterReducer.ts","redux/state.ts","utils/local-storage.ts","index.tsx"],"names":["module","exports","Error404","className","Display","props","tempStartValue","tempMaxValue","editMode","maxValue","currentValue","error","Button","title","startValue","callback","disabled","onClick","Settings","ACTIONS_TYPE","setMaxValue","setStartValue","changeValue","e","num","currentTarget","value","dataset","data-value","type","onChange","ChangeStartValueAC","CHANGE_START_VALUE","payload","ChangeMaxValueAC","CHANGE_MAX_VALUE","COUNTER_1","useSelector","state","counter","dispatch","useDispatch","useState","setEditMode","setCurrentValue","COUNTER_2","s","container","settingsWrapper","settings","buttonsWrapper","PATH","Routes","path","exact","render","to","Header","open","setOpen","onMouseOver","onMouseOut","activeClassName","App","initialState","reducers","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","throttle","stringify","setItem","saveState","getState","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ea82758d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Counter_2_container__24viO\",\"counter\":\"Counter_2_counter__12Dnw\",\"settings\":\"Counter_2_settings__11cIA\",\"settingsWrapper\":\"Counter_2_settingsWrapper__2Vn7L\",\"buttonsWrapper\":\"Counter_2_buttonsWrapper__2LMkF\"};","import React from 'react'\r\n\r\n\r\nfunction Error404() {\r\n  return (\r\n    <div className={'error-container'}>\r\n      <div className={'error-number'}>404</div>\r\n      <div className={'error-text'}>Page not found!</div>\r\n      <div className={'error-smile'}>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Error404\r\n","import React from 'react'\r\nimport './App.css'\r\n\r\ntype DisplayType = {\r\n  className?: string\r\n  editMode: boolean\r\n  currentValue: number\r\n  startValue: number\r\n  maxValue: number\r\n  tempStartValue: number\r\n  tempMaxValue: number\r\n}\r\n\r\nfunction Display(props: DisplayType) {\r\n  \r\n  const {className, tempStartValue, tempMaxValue, editMode, maxValue, currentValue} = props\r\n  const error = tempStartValue < 0 || tempMaxValue <= tempStartValue\r\n  return (\r\n    <div className={className ? className : 'display-wrapper'}>\r\n      {error ? <div className={'display-error'}>Invalid value</div> :\r\n        editMode ? <div className={'display-message'}>Enter set to save changes</div> :\r\n          <div className={`display-count ${currentValue === maxValue ? 'red' : ''}`}>{currentValue}</div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Display\r\n","import React from 'react'\r\nimport './App.css'\r\n\r\ntype ButtonType = {\r\n  editMode?: boolean\r\n  title: string\r\n  startValue: number\r\n  maxValue: number\r\n  tempStartValue: number\r\n  tempMaxValue: number\r\n  currentValue: number\r\n  callback: () => void\r\n}\r\n\r\nfunction Button(props: ButtonType) {\r\n  const {editMode, title, startValue, maxValue, tempStartValue, tempMaxValue, currentValue, callback} = props\r\n  const clickHandler = () => {\r\n    callback()\r\n  }\r\n  const disabled = (editMode && title !== 'set')\r\n    || (startValue === currentValue && title === 'reset')\r\n    || (title === 'inc' && currentValue === maxValue)\r\n    || (title === 'set' && tempStartValue < 0 || tempMaxValue <= tempStartValue)\r\n  // || (title === 'set' && !editMode)\r\n  return (\r\n    <button\r\n      className={`btn ${disabled ? 'disabled' : null}`}\r\n      onClick={clickHandler}\r\n      disabled={disabled}\r\n    >\r\n      {title}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button\r\n","import React, { ChangeEvent } from 'react'\r\nimport './App.css'\r\n\r\ntype SettingsType = {\r\n  setStartValue: (num: number) => void\r\n  setMaxValue: (num: number) => void\r\n  className?: string\r\n  startValue: number\r\n  maxValue: number\r\n}\r\n\r\nfunction Settings(props: SettingsType) {\r\n  const {startValue, maxValue, setMaxValue, setStartValue} = props\r\n  \r\n  const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const num = +e.currentTarget.value\r\n    const value = e.currentTarget.dataset.value\r\n    \r\n    if (value === 'max') {\r\n      setMaxValue(num)\r\n    } else if (value === 'start') {\r\n      setStartValue(num)\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className={props.className ? props.className : 'settings-wrapper'}>\r\n      <div className={'settings-input-wrapper'}>\r\n        max value:\r\n        <input\r\n          className={`settings-input ${maxValue <= startValue ? 'error' : ''}`}\r\n          data-value={'max'}\r\n          type={'number'}\r\n          value={maxValue}\r\n          onChange={changeValue}\r\n        />\r\n      </div>\r\n      <div className={'settings-input-wrapper'}>\r\n        start value:\r\n        <input\r\n          className={`settings-input ${startValue < 0 || startValue >= maxValue ? 'error' : ''}`}\r\n          type={'number'}\r\n          data-value={'start'}\r\n          value={startValue}\r\n          onChange={changeValue}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings\r\n","export enum ACTIONS_TYPE {\r\n  CHANGE_START_VALUE = 'Counter/CHANGE_START_VALUE',\r\n  CHANGE_MAX_VALUE = 'Counter/CHANGE_MAX_VALUE',\r\n}\r\n\r\nexport type ChangeStartValueType = {\r\n  type: ACTIONS_TYPE.CHANGE_START_VALUE,\r\n  payload: { startValue: number }\r\n}\r\nexport const ChangeStartValueAC = (startValue: number): ChangeStartValueType => {\r\n  return {\r\n    type: ACTIONS_TYPE.CHANGE_START_VALUE,\r\n    payload: {startValue},\r\n  }\r\n}\r\n\r\nexport type ChangeMaxValueType = {\r\n  type: ACTIONS_TYPE.CHANGE_MAX_VALUE,\r\n  payload: { maxValue: number }\r\n}\r\nexport const ChangeMaxValueAC = (maxValue: number): ChangeMaxValueType => {\r\n  return {\r\n    type: ACTIONS_TYPE.CHANGE_MAX_VALUE,\r\n    payload: {maxValue},\r\n  }\r\n}\r\n\r\nexport type CounterActionsType = ChangeStartValueType | ChangeMaxValueType\r\n","import React, { useState } from 'react'\r\nimport '../App.css'\r\nimport Display from '../Display'\r\nimport Button from '../Button'\r\nimport Settings from '../Settings'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { IGlobalState } from '../redux/state'\r\nimport {\r\n  ChangeMaxValueAC,\r\n  ChangeStartValueAC,\r\n} from '../redux/actions'\r\n\r\nfunction COUNTER_1() {\r\n  const startValue = useSelector<IGlobalState, number>(state => state.counter.startValue)\r\n  const maxValue = useSelector<IGlobalState, number>(state => state.counter.maxValue)\r\n  const dispatch = useDispatch()\r\n  \r\n  const [editMode, setEditMode] = useState(false)\r\n  const [currentValue, setCurrentValue] = useState(startValue)\r\n  const [tempStartValue, setStartValue] = useState(startValue)\r\n  const [tempMaxValue, setMaxValue] = useState(maxValue)\r\n  \r\n  const reset = () => {\r\n    setCurrentValue(startValue)\r\n  }\r\n  const setTempStartValue = (num: number) => {\r\n    setStartValue(num)\r\n    setEditMode(true)\r\n  }\r\n  const setTempMaxValue = (num: number) => {\r\n    setMaxValue(num)\r\n    setEditMode(true)\r\n  }\r\n  \r\n  const set = () => {\r\n    setCurrentValue(tempStartValue)\r\n    dispatch(ChangeStartValueAC(tempStartValue))\r\n    dispatch(ChangeMaxValueAC(tempMaxValue))\r\n    setEditMode(false)\r\n  }\r\n  \r\n  const increment = () => {\r\n    if (currentValue < maxValue) {\r\n      setCurrentValue(state => state + 1)\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className='container'>\r\n      <div className={'settings'}>\r\n        <Settings\r\n          startValue={tempStartValue}\r\n          maxValue={tempMaxValue}\r\n          setStartValue={setTempStartValue}\r\n          setMaxValue={setTempMaxValue}\r\n        />\r\n        <div className='buttons-wrapper'>\r\n          <Button\r\n            title={'set'}\r\n            editMode={editMode}\r\n            startValue={startValue}\r\n            tempStartValue={tempStartValue}\r\n            tempMaxValue={tempMaxValue}\r\n            maxValue={maxValue}\r\n            currentValue={currentValue}\r\n            callback={set}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className={'counter'}>\r\n        <Display\r\n          currentValue={currentValue}\r\n          startValue={startValue}\r\n          maxValue={maxValue}\r\n          tempStartValue={tempStartValue}\r\n          tempMaxValue={tempMaxValue}\r\n          editMode={editMode}\r\n        />\r\n        <div className='buttons-wrapper'>\r\n          <Button\r\n            editMode={editMode}\r\n            title={'inc'}\r\n            startValue={startValue}\r\n            maxValue={maxValue}\r\n            tempStartValue={tempStartValue}\r\n            tempMaxValue={tempMaxValue}\r\n            currentValue={currentValue}\r\n            callback={increment}\r\n          />\r\n          <Button\r\n            editMode={editMode}\r\n            title={'reset'}\r\n            startValue={startValue}\r\n            maxValue={maxValue}\r\n            tempStartValue={tempStartValue}\r\n            tempMaxValue={tempMaxValue}\r\n            currentValue={currentValue}\r\n            callback={reset}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default COUNTER_1","import React, { useState } from 'react'\r\nimport '../App.css'\r\nimport Display from '../Display'\r\nimport Button from '../Button'\r\nimport Settings from '../Settings'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { IGlobalState } from '../redux/state'\r\nimport {\r\n  ChangeMaxValueAC,\r\n  ChangeStartValueAC,\r\n} from '../redux/actions'\r\nimport s from './Counter_2.module.css'\r\n\r\nfunction COUNTER_2() {\r\n  const startValue = useSelector<IGlobalState, number>(state => state.counter.startValue)\r\n  const maxValue = useSelector<IGlobalState, number>(state => state.counter.maxValue)\r\n  const dispatch = useDispatch()\r\n  \r\n  const [editMode, setEditMode] = useState(false)\r\n  const [currentValue, setCurrentValue] = useState(startValue)\r\n  const [tempStartValue, setStartValue] = useState(startValue)\r\n  const [tempMaxValue, setMaxValue] = useState(maxValue)\r\n  \r\n  const set = () => {\r\n    if (editMode) {\r\n      dispatch(ChangeStartValueAC(tempStartValue))\r\n      dispatch(ChangeMaxValueAC(tempMaxValue))\r\n      setCurrentValue(tempStartValue)\r\n      setEditMode(false)\r\n    } else {\r\n      setEditMode(true)\r\n    }\r\n  }\r\n  const reset = () => {\r\n    setCurrentValue(startValue)\r\n  }\r\n  const setTempStartValue = (num: number) => {\r\n    setStartValue(num)\r\n    setEditMode(true)\r\n  }\r\n  const setTempMaxValue = (num: number) => {\r\n    setMaxValue(num)\r\n    setEditMode(true)\r\n  }\r\n  const increment = () => {\r\n    if (currentValue < maxValue) {\r\n      setCurrentValue(value => value + 1)\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className={s.container}>\r\n      <div className={s.counter}>\r\n        {editMode ?\r\n          <div className={s.settingsWrapper}>\r\n            <Settings\r\n              className={s.settings}\r\n              startValue={tempStartValue}\r\n              maxValue={tempMaxValue}\r\n              setStartValue={setTempStartValue}\r\n              setMaxValue={setTempMaxValue}\r\n            />\r\n          </div>\r\n          : <Display\r\n            currentValue={currentValue}\r\n            startValue={startValue}\r\n            maxValue={maxValue}\r\n            tempStartValue={tempStartValue}\r\n            tempMaxValue={tempMaxValue}\r\n            editMode={editMode}\r\n          />\r\n        }\r\n        <div className={s.buttonsWrapper}>\r\n          <Button\r\n            title={'set'}\r\n            editMode={editMode}\r\n            startValue={startValue}\r\n            tempStartValue={tempStartValue}\r\n            tempMaxValue={tempMaxValue}\r\n            maxValue={maxValue}\r\n            currentValue={currentValue}\r\n            callback={set}\r\n          />\r\n          <Button\r\n            editMode={editMode}\r\n            title={'inc'}\r\n            startValue={startValue}\r\n            maxValue={maxValue}\r\n            tempStartValue={tempStartValue}\r\n            tempMaxValue={tempMaxValue}\r\n            currentValue={currentValue}\r\n            callback={increment}\r\n          />\r\n          <Button\r\n            editMode={editMode}\r\n            title={'reset'}\r\n            startValue={startValue}\r\n            maxValue={maxValue}\r\n            tempStartValue={tempStartValue}\r\n            tempMaxValue={tempMaxValue}\r\n            currentValue={currentValue}\r\n            callback={reset}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default COUNTER_2","import React from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport Error404 from './Error404'\r\nimport COUNTER_1 from './Counter_1/COUNTER_1'\r\nimport COUNTER_2 from './Counter_2/COUNTER_2'\r\n\r\nexport const PATH = {\r\n  COUNTER_1: '/counter_1',\r\n  COUNTER_2: '/counter_2',\r\n}\r\n\r\nfunction Routes() {\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route path={'/'} exact render={() => <Redirect to={PATH.COUNTER_1}/>}/>\r\n        <Route path={PATH.COUNTER_1} render={() => <COUNTER_1/>}/>\r\n        <Route path={PATH.COUNTER_2} render={() => <COUNTER_2 />}/><Route render={() => <Error404/>}/>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Routes\r\n","import React, { useState } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nfunction Header() {\r\n  const [open, setOpen] = useState(false)\r\n  \r\n  const showMenu = () => {\r\n    setOpen(true)\r\n  }\r\n  const hideMenu = () => {\r\n    setOpen(false)\r\n  }\r\n  \r\n  \r\n  return (\r\n    <div className={open ? 'wrapperIsNavOpen' : 'headerWrapper'} onMouseOver={showMenu} onMouseOut={hideMenu}>\r\n      <div className={'nav'}>\r\n        <div className={'icon'}>menu</div>\r\n        <div className={'navBody'}>\r\n          <NavLink className={'link'} activeClassName={'activeLink'} to={'/counter_1'}>counter_1</NavLink>\r\n          <NavLink className={'link'} activeClassName={'activeLink'} to={'/counter_2'}>counter_2</NavLink>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport './App.css'\r\nimport Routes from './Routes'\r\nimport Header from './Header'\r\nimport { HashRouter } from 'react-router-dom'\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className='main-container'>\r\n      <HashRouter>\r\n        <Header/>\r\n        <Routes/>\r\n      </HashRouter>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ACTIONS_TYPE, CounterActionsType } from './actions'\r\n\r\nconst initialState = {\r\n  startValue: 0,\r\n  maxValue: 0,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: CounterActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.CHANGE_MAX_VALUE:\r\n    case ACTIONS_TYPE.CHANGE_START_VALUE:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers, createStore } from 'redux'\r\nimport { counterReducer } from './counterReducer'\r\nimport { loadState, saveState } from '../utils/local-storage'\r\nimport throttle from 'lodash.throttle'\r\n\r\nconst reducers = combineReducers({\r\n  counter: counterReducer,\r\n})\r\n\r\nexport type IGlobalState = ReturnType<typeof reducers>\r\n\r\nexport const store = createStore(reducers, loadState())\r\n\r\nstore.subscribe(throttle(() => {\r\n  saveState({\r\n    counter: store.getState().counter,\r\n  })\r\n}))","import { IGlobalState } from '../redux/state'\r\n\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state')\r\n    if (serializedState === null) {\r\n      return undefined\r\n    }\r\n    return JSON.parse(serializedState)\r\n  } catch (err) {\r\n    return undefined\r\n  }\r\n}\r\n\r\nexport const saveState = (state: IGlobalState) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state)\r\n    localStorage.setItem('state', serializedState)\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport { Provider } from 'react-redux'\r\nimport { store } from './redux/state'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n)\r\n"],"sourceRoot":""}